// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:ruchi123@localhost:5433/postgres?schema=public"
}

model User {
  id       Int     @id @default(autoincrement())
  address  String  @unique
  name     String?
  bio      String?
  twitter  String?
  telegram String?
  discord  String?
  nonce    String?
  role     String?

  threads              Thread[]
  comments             Comment[]
  upvotes              Upvote[]
  Reply                Reply[]
  BlockChainCredential BlockChainCredential[]
  // View                 View[]
  Reaction             Reaction[]
  Delegate             Delegate[]
}

model Categories {
  id      Int     @id @default(autoincrement())
  address String  @unique
  name    String?
  bio     String?

  telegram String?
  discord  String?
  nonce    String?

  threads              Thread[]
  comments             Comment[]
  upvotes              Upvote[]
  Reply                Reply[]
  BlockChainCredential BlockChainCredential[]
  // View                 View[]
  TokenBalance         TokenBalance[]
  Reaction             Reaction[]
  Delegate             Delegate[]
}

model Tag {
  id         Int     @id @default(autoincrement())
  address    String  @unique
  name       String?
  bio        String?
  role       String?
  categories String?
}

model Proposal {
  id      Int     @id @default(autoincrement())
  address String  @unique
  name    String?
  bio     String?
  role    String?
}

model View {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  authorId   Int
  canvasHash String?
}

model Thread {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  viewCount Int       @default(0)
  createdAt DateTime  @default(now())
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  upvotes   Upvote[]

  canvasAction  String?
  canvasSession String?
  canvasHash    String?
  Categories    Categories?    @relation(fields: [categoriesId], references: [id])
  categoriesId  Int?
  TokenBalance  TokenBalance[]
  Delegate      Delegate[]
}

model Comment {
  id            Int            @id @default(autoincrement())
  content       String
  createdAt     DateTime       @default(now())
  authorId      Int
  author        User           @relation(fields: [authorId], references: [id])
  threadId      Int
  thread        Thread         @relation(fields: [threadId], references: [id])
  upvotes       Upvote[]
  replies       Reply[]
  canvasAction  String?
  canvasSession String?
  canvasHash    String?
  Categories    Categories?    @relation(fields: [categoriesId], references: [id])
  categoriesId  Int?
  TokenBalance  TokenBalance[]
  Reaction      Reaction[]
  Delegate      Delegate[]
}

model Member {
  id       Int     @id @default(autoincrement())
  address  String  @unique
  name     String?
  bio      String?
  twitter  String?
  telegram String?
}

model Vote {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  viewCount     Int      @default(0)
  createdAt     DateTime @default(now())
  authorId      Int
  canvasAction  String?
  canvasSession String?
  canvasHash    String?
}

model Veiw {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
}

model Suspend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  upvotes   Upvote[]

  canvasAction  String
  canvasSession String
  canvasHash    String
  Categories    Categories?    @relation(fields: [categoriesId], references: [id])
  categoriesId  Int?
  TokenBalance  TokenBalance[]
  Delegate      Delegate[]
}

model Upvote {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  commentId    Int?
  comment      Comment?    @relation(fields: [commentId], references: [id])
  replyId      Int?
  reply        Reply?      @relation(fields: [replyId], references: [id])
  threadId     Int?
  thread       Thread?     @relation(fields: [threadId], references: [id])
  createdAt    DateTime    @default(now())
  // View      View?    @relation(fields: [viewId], references: [id])
  viewId       Int?
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId Int?
  Reaction     Reaction?   @relation(fields: [reactionId], references: [id])
  reactionId   Int?
}

model Delegate {
  id Int @id @default(autoincrement())

  commentId    Int?
  replyId      Int?
  threadId     Int?
  createdAt    DateTime    @default(now())
  viewId       Int?
  reactionId   Int?
  User         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId Int?
  Thread       Thread?     @relation(fields: [threadId], references: [id])
  Comment      Comment?    @relation(fields: [commentId], references: [id])
  Reply        Reply?      @relation(fields: [replyId], references: [id])
  Reaction     Reaction?   @relation(fields: [reactionId], references: [id])
}

model TokenBalance {
  id           Int         @id @default(autoincrement())
  commentId    Int?
  comment      Comment?    @relation(fields: [commentId], references: [id])
  threadId     Int?
  thread       Thread?     @relation(fields: [threadId], references: [id])
  createdAt    DateTime    @default(now())
  // View      View?    @relation(fields: [viewId], references: [id])
  viewId       Int?
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId Int?
  Reply        Reply?      @relation(fields: [replyId], references: [id])
  replyId      Int?
  Reaction     Reaction?   @relation(fields: [reactionId], references: [id])
  reactionId   Int?
}

model Snapshot {
  id            Int      @id @default(autoincrement())
  proposal      String
  votes         String
  delegate      Int      @default(0)
  createdAt     DateTime @default(now())
  authorId      Int
  canvasAction  String?
  canvasSession String?
  canvasHash    String?
}

model Reaction {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  upvotes   Upvote[]

  canvasAction  String
  canvasSession String
  canvasHash    String

  Categories   Categories?    @relation(fields: [categoriesId], references: [id])
  categoriesId Int?
  TokenBalance TokenBalance[]
  Delegate     Delegate[]
}

//siwe
model BlockChainCredential {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  chain        String
  address      String
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId Int?

  @@unique([chain, address])
}
